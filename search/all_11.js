var searchData=
[
  ['readme_2emd_175',['README.md',['../README_8md.html',1,'']]],
  ['red_176',['red',['../namespacesteppable_1_1____internals_1_1utils_1_1colors.html#a36cc73ec1844a03d7cba5b409109c999',1,'steppable::__internals::utils::colors']]],
  ['remainder_177',['remainder',['../structsteppable_1_1____internals_1_1arithmetic_1_1QuotientRemainder.html#a6b2431c269b09e854d33a09bd31f00e6',1,'steppable::__internals::arithmetic::QuotientRemainder']]],
  ['removeleadingzeros_178',['removeLeadingZeros',['../namespacesteppable_1_1____internals_1_1numUtils.html#a3d4e1e21ccf1afecd766d3152df87212',1,'steppable::__internals::numUtils::removeLeadingZeros(const std::vector&lt; int &gt; &amp;vector) -&gt; std::decay_t&lt; decltype(vector)&gt;'],['../namespacesteppable_1_1____internals_1_1numUtils.html#a8d5637338641568af53f46a993400130',1,'steppable::__internals::numUtils::removeLeadingZeros(const std::string &amp;string) -&gt; std::decay_t&lt; decltype(string)&gt;']]],
  ['removetrailingzeros_179',['removeTrailingZeros',['../namespacesteppable_1_1____internals_1_1numUtils.html#a5d7e8d74d304a1ac7fc2ad4dbf5b40ae',1,'steppable::__internals::numUtils::removeTrailingZeros(const std::vector&lt; int &gt; &amp;_vector) -&gt; std::decay_t&lt; decltype(_vector)&gt;'],['../namespacesteppable_1_1____internals_1_1numUtils.html#a01d87095fb8502339f72173ecfca1419',1,'steppable::__internals::numUtils::removeTrailingZeros(const std::string &amp;numStr) -&gt; std::decay_t&lt; decltype(numStr)&gt;']]],
  ['replaceleadingzeros_180',['replaceLeadingZeros',['../namespacesteppable_1_1____internals_1_1numUtils.html#ae8dde3fc958f32009443d1aeaa2c0900',1,'steppable::__internals::numUtils']]],
  ['reportabs_181',['reportAbs',['../absReport_8hpp.html#a7e44e3e84696a88d84e6d9e3331ea6a3',1,'reportAbs(const std::string_view &amp;number, int steps=2):&#160;absReport.cpp'],['../absReport_8cpp.html#a7e44e3e84696a88d84e6d9e3331ea6a3',1,'reportAbs(const std::string_view &amp;number, int steps=2):&#160;absReport.cpp']]],
  ['reportadd_182',['reportAdd',['../addReport_8cpp.html#ad77bd53c675044525fecd7273407c4a6',1,'reportAdd(const std::string &amp;aInteger, const std::string &amp;aDecimal, const std::string &amp;bInteger, const std::string &amp;bDecimal, const std::vector&lt; int &gt; &amp;sumDigits, const std::vector&lt; bool &gt; &amp;carries, const bool resultIsNegative, const int steps, const bool properlyFormat):&#160;addReport.cpp'],['../addReport_8hpp.html#a88d3fd7ce0a9f5b2a4d22123e270592f',1,'reportAdd(const std::string &amp;aInteger, const std::string &amp;aDecimal, const std::string &amp;bInteger, const std::string &amp;bDecimal, const std::vector&lt; int &gt; &amp;sumDigits, const std::vector&lt; bool &gt; &amp;carries, bool resultIsNegative, int steps, bool properlyFormat):&#160;addReport.cpp']]],
  ['reportbaseconvert_183',['reportBaseConvert',['../baseConvertReport_8cpp.html#a6d845da92aca7ce960ade28f30b76697',1,'reportBaseConvert(const std::string_view &amp;_number, const std::string_view &amp;_base, const std::vector&lt; std::string &gt; &amp;_result):&#160;baseConvertReport.cpp'],['../baseConvertReport_8hpp.html#a6d845da92aca7ce960ade28f30b76697',1,'reportBaseConvert(const std::string_view &amp;_number, const std::string_view &amp;_base, const std::vector&lt; std::string &gt; &amp;_result):&#160;baseConvertReport.cpp']]],
  ['reportbaseconvertstep_184',['reportBaseConvertStep',['../baseConvertReport_8cpp.html#ac1b7cbfa5848d3fdd2c0e3b8a63c380b',1,'reportBaseConvertStep(const std::string &amp;_number, const std::string &amp;_base, const std::string &amp;_quotient, const std::string &amp;_remainder):&#160;baseConvertReport.cpp'],['../baseConvertReport_8hpp.html#ac1b7cbfa5848d3fdd2c0e3b8a63c380b',1,'reportBaseConvertStep(const std::string &amp;_number, const std::string &amp;_base, const std::string &amp;_quotient, const std::string &amp;_remainder):&#160;baseConvertReport.cpp']]],
  ['reportcomparisonatinteger_185',['reportComparisonAtInteger',['../comparisonReport_8cpp.html#a9837660fa80278748f7f9bc397f5fba4',1,'reportComparisonAtInteger(const std::string_view &amp;a, const std::string_view &amp;b, const bool bigger, const int steps):&#160;comparisonReport.cpp'],['../comparisonReport_8hpp.html#aadc831ed553ca52c918c942e50a1e2a6',1,'reportComparisonAtInteger(const std::string_view &amp;a, const std::string_view &amp;b, bool bigger, int steps=2):&#160;comparisonReport.cpp']]],
  ['reportcomparisonbydigit_186',['reportComparisonByDigit',['../comparisonReport_8cpp.html#adc6ac398c16b4d30ab55b0ec5ceef9f3',1,'reportComparisonByDigit(const std::string_view &amp;a, const std::string_view &amp;b, const size_t _digit, const bool bigger, const bool bothNegative, const int steps):&#160;comparisonReport.cpp'],['../comparisonReport_8hpp.html#a1e43eb78652f586664ae0fada1844576',1,'reportComparisonByDigit(const std::string_view &amp;a, const std::string_view &amp;b, size_t digit, bool bigger, bool bothNegative, int steps=2):&#160;comparisonReport.cpp']]],
  ['reportcomparisonbypolarity_187',['reportComparisonByPolarity',['../comparisonReport_8cpp.html#a8bdddfcaa5a1d0339df5705ec6ff2aff',1,'reportComparisonByPolarity(const std::string_view &amp;a, const std::string_view &amp;b, const bool bigger, const int steps):&#160;comparisonReport.cpp'],['../comparisonReport_8hpp.html#a4d8e360e5845468ad9de413dea6b7a85',1,'reportComparisonByPolarity(const std::string_view &amp;a, const std::string_view &amp;b, bool greater, int steps=2):&#160;comparisonReport.cpp']]],
  ['reportdecimalconvert_188',['reportDecimalConvert',['../decimalConvertReport_8cpp.html#adef21e05b0bf387eebb5dbc7ec8fee61',1,'reportDecimalConvert(const std::string_view &amp;inputString, const std::string_view &amp;baseString, const std::string_view &amp;convertedString, const int steps):&#160;decimalConvertReport.cpp'],['../decimalConvertReport_8hpp.html#a38b218d682745f575e577962291c0834',1,'reportDecimalConvert(const std::string_view &amp;inputString, const std::string_view &amp;baseString, const std::string_view &amp;convertedString, const int steps=2):&#160;decimalConvertReport.cpp']]],
  ['reportdecimalconvertstep_189',['reportDecimalConvertStep',['../decimalConvertReport_8cpp.html#a7a30eeca49cdc355732971d0aad6d244',1,'reportDecimalConvertStep(const std::string_view &amp;baseString, const std::string_view &amp;digit, const size_t powerIndex, const std::string_view &amp;convertedDigit, const size_t maxWidth):&#160;decimalConvertReport.cpp'],['../decimalConvertReport_8hpp.html#a7a30eeca49cdc355732971d0aad6d244',1,'reportDecimalConvertStep(const std::string_view &amp;baseString, const std::string_view &amp;digit, const size_t powerIndex, const std::string_view &amp;convertedDigit, const size_t maxWidth):&#160;decimalConvertReport.cpp']]],
  ['reportdivision_190',['reportDivision',['../divisionReport_8cpp.html#a37e4e7cb6fe42ae3131cdc071b038687',1,'reportDivision(std::stringstream &amp;tempFormattedAns, const std::string_view &amp;temp, const std::string_view &amp;ans, const std::string_view &amp;divisor, const std::string_view &amp;_divisor, const std::string_view &amp;_number, const int steps, const int width, const bool resultIsNegative):&#160;divisionReport.cpp'],['../divisionReport_8hpp.html#a37e4e7cb6fe42ae3131cdc071b038687',1,'reportDivision(std::stringstream &amp;tempFormattedAns, const std::string_view &amp;temp, const std::string_view &amp;ans, const std::string_view &amp;divisor, const std::string_view &amp;_divisor, const std::string_view &amp;_number, const int steps, const int width, const bool resultIsNegative):&#160;divisionReport.cpp']]],
  ['reportdivisionstep_191',['reportDivisionStep',['../divisionReport_8cpp.html#aaebd1f284f6703b7629aa18d21f7ccf2',1,'reportDivisionStep(const std::string_view &amp;temp, const std::string_view &amp;quotient, const std::string_view &amp;divisor, size_t width, size_t index, const std::string_view lastRemainder):&#160;divisionReport.cpp'],['../divisionReport_8hpp.html#a3010ab5571a71e2c6493b47afc4eb9ed',1,'reportDivisionStep(const std::string_view &amp;temp, const std::string_view &amp;quotient, const std::string_view &amp;divisor, size_t width, size_t index, std::string_view lastRemainder):&#160;divisionReport.cpp']]],
  ['reportmultiply_192',['reportMultiply',['../multiplyReport_8cpp.html#a551f62010399287bf016fd805c5d4cd3',1,'reportMultiply(const std::string &amp;a, const std::string &amp;b, const std::string &amp;aStr, const std::string &amp;bStr, const std::string &amp;aDecimal, const std::string &amp;bDecimal, const std::vector&lt; int &gt; &amp;finalProdDigits, const std::vector&lt; int &gt; &amp;finalProdCarries, const std::vector&lt; std::vector&lt; int &gt;&gt; &amp;prodDigitsOut, const std::vector&lt; std::vector&lt; int &gt;&gt; &amp;carries, const bool resultIsNegative, const long long scale, const int steps):&#160;multiplyReport.cpp'],['../multiplyReport_8hpp.html#a80129f375b1e65275aa8f76943b1c5ca',1,'reportMultiply(const std::string &amp;a, const std::string &amp;b, const std::string &amp;aStr, const std::string &amp;bStr, const std::string &amp;aDecimal, const std::string &amp;bDecimal, const std::vector&lt; int &gt; &amp;finalProdDigits, const std::vector&lt; int &gt; &amp;finalProdCarries, const std::vector&lt; std::vector&lt; int &gt;&gt; &amp;prodDigitsOut, const std::vector&lt; std::vector&lt; int &gt;&gt; &amp;carries, bool resultIsNegative=false, long long scale=0, int steps=2):&#160;multiplyReport.cpp']]],
  ['reportpower_193',['reportPower',['../powerReport_8cpp.html#afff5f8aa771cf432836ef03f6f442dae',1,'reportPower(const std::string_view _number, const std::string_view &amp;raiseTo, const bool negative, const int steps):&#160;powerReport.cpp'],['../powerReport_8hpp.html#a3983fa7e3f0ac4977f27439fb574b389',1,'reportPower(std::string_view _number, const std::string_view &amp;raiseTo, bool negative, int steps):&#160;powerReport.cpp']]],
  ['reportsubtract_194',['reportSubtract',['../subtractReport_8hpp.html#a9bff6a6b185789209249282856b766c2',1,'reportSubtract(const std::string &amp;aInteger, const std::string &amp;aDecimal, const std::string &amp;bInteger, const std::string &amp;bDecimal, bool aIsDecimal, bool bIsDecimal, const std::vector&lt; int &gt; &amp;_diffDigits, const std::vector&lt; int &gt; &amp;borrows, int steps, bool resultIsNegative, bool noMinus=false):&#160;subtractReport.cpp'],['../subtractReport_8cpp.html#ad21f3d209885b1c419ff73800bb3b33b',1,'reportSubtract(const std::string &amp;aInteger, const std::string &amp;aDecimal, const std::string &amp;bInteger, const std::string &amp;bDecimal, const bool aIsDecimal, const bool bIsDecimal, const std::vector&lt; int &gt; &amp;_diffDigits, const std::vector&lt; int &gt; &amp;borrows, const int steps, bool resultIsNegative, const bool noMinus):&#160;subtractReport.cpp']]],
  ['representnumber_195',['representNumber',['../namespacesteppable_1_1____internals_1_1arithmetic.html#a6f4658ff66c0d02138acc2aa221856d0',1,'steppable::__internals::arithmetic']]],
  ['reset_196',['reset',['../namespacesteppable_1_1____internals_1_1utils.html#a1d55e037764ba41ec8682f00b30701ff',1,'steppable::__internals::utils']]],
  ['reverse_197',['reverse',['../namespacesteppable_1_1____internals_1_1utils_1_1formats.html#a588a3cdce1fef100d63d64816a37981a',1,'steppable::__internals::utils::formats']]],
  ['rgb_5fbg_198',['RGB_BG',['../colors_8hpp.html#a2ed9cd37a5983107984f2af583c469d8',1,'colors.hpp']]],
  ['rgb_5ftext_199',['RGB_TEXT',['../colors_8hpp.html#a1c92c41f9a358554c589c5877d61bf20',1,'colors.hpp']]],
  ['rounding_2ecpp_200',['rounding.cpp',['../rounding_8cpp.html',1,'']]],
  ['rounding_2ehpp_201',['rounding.hpp',['../rounding_8hpp.html',1,'']]],
  ['roundingmode_202',['RoundingMode',['../number_8hpp.html#a61949411cf477d12b3d15472d5b83092',1,'steppable']]],
  ['roundoff_203',['roundOff',['../namespacesteppable_1_1____internals_1_1numUtils.html#ac634c8aea297b7e8f5cc251041089c5b',1,'steppable::__internals::numUtils']]],
  ['rreplace_204',['rReplace',['../namespacesteppable_1_1____internals_1_1stringUtils.html#ab790464bf85c0a0932ef563d29f8a9da',1,'steppable::__internals::stringUtils']]]
];
