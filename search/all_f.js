var searchData=
[
  ['readme_2emd_130',['README.md',['../README_8md.html',1,'']]],
  ['red_131',['red',['../namespacecolors.html#ae360f74f6cd6e0fc3de2c245aba4d500',1,'colors']]],
  ['removeleadingzeros_132',['removeLeadingZeros',['../util_8hpp.html#a8db0b6516cd43653a22f81a36140b658',1,'removeLeadingZeros(const std::string &amp;string) -&gt; std::decay_t&lt; decltype(string)&gt;:&#160;util.cpp'],['../util_8cpp.html#a8056dcad90ba9582ba25405a95c2f1e4',1,'removeLeadingZeros(const std::vector&lt; int &gt; &amp;vector) -&gt; std::decay_t&lt; decltype(vector)&gt;:&#160;util.cpp'],['../util_8cpp.html#a8db0b6516cd43653a22f81a36140b658',1,'removeLeadingZeros(const std::string &amp;string) -&gt; std::decay_t&lt; decltype(string)&gt;:&#160;util.cpp'],['../util_8hpp.html#a8056dcad90ba9582ba25405a95c2f1e4',1,'removeLeadingZeros(const std::vector&lt; int &gt; &amp;vector) -&gt; std::decay_t&lt; decltype(vector)&gt;:&#160;util.cpp']]],
  ['replaceleadingzeros_133',['replaceLeadingZeros',['../util_8hpp.html#ac87bf229222a2a4f32b8626281c6c282',1,'replaceLeadingZeros(const std::vector&lt; int &gt; &amp;vector) -&gt; std::decay_t&lt; decltype(vector)&gt;:&#160;util.cpp'],['../util_8cpp.html#ac87bf229222a2a4f32b8626281c6c282',1,'replaceLeadingZeros(const std::vector&lt; int &gt; &amp;vector) -&gt; std::decay_t&lt; decltype(vector)&gt;:&#160;util.cpp']]],
  ['reportabs_134',['reportAbs',['../absReport_8cpp.html#a7e44e3e84696a88d84e6d9e3331ea6a3',1,'reportAbs(const std::string_view &amp;number, int steps=2):&#160;absReport.cpp'],['../absReport_8hpp.html#a7e44e3e84696a88d84e6d9e3331ea6a3',1,'reportAbs(const std::string_view &amp;number, int steps=2):&#160;absReport.cpp']]],
  ['reportadd_135',['reportAdd',['../addReport_8cpp.html#a790c309eb43b10e2fca286cee3a94ac1',1,'reportAdd(const std::string &amp;aInteger, const std::string &amp;aDecimal, const std::string &amp;bInteger, const std::string &amp;bDecimal, const std::vector&lt; int &gt; &amp;sumDigits, const std::vector&lt; bool &gt; &amp;carries, const bool resultIsNegative, const int steps):&#160;addReport.cpp'],['../addReport_8hpp.html#a790c309eb43b10e2fca286cee3a94ac1',1,'reportAdd(const std::string &amp;aInteger, const std::string &amp;aDecimal, const std::string &amp;bInteger, const std::string &amp;bDecimal, const std::vector&lt; int &gt; &amp;sumDigits, const std::vector&lt; bool &gt; &amp;carries, const bool resultIsNegative, const int steps):&#160;addReport.cpp']]],
  ['reportcomparisonatinteger_136',['reportComparisonAtInteger',['../comparisonReport_8cpp.html#a9837660fa80278748f7f9bc397f5fba4',1,'reportComparisonAtInteger(const std::string_view &amp;a, const std::string_view &amp;b, const bool bigger, const int steps):&#160;comparisonReport.cpp'],['../comparisonReport_8hpp.html#aadc831ed553ca52c918c942e50a1e2a6',1,'reportComparisonAtInteger(const std::string_view &amp;a, const std::string_view &amp;b, bool bigger, int steps=2):&#160;comparisonReport.cpp']]],
  ['reportcomparisonbydigit_137',['reportComparisonByDigit',['../comparisonReport_8cpp.html#adc6ac398c16b4d30ab55b0ec5ceef9f3',1,'reportComparisonByDigit(const std::string_view &amp;a, const std::string_view &amp;b, const size_t _digit, const bool bigger, const bool bothNegative, const int steps):&#160;comparisonReport.cpp'],['../comparisonReport_8hpp.html#a1e43eb78652f586664ae0fada1844576',1,'reportComparisonByDigit(const std::string_view &amp;a, const std::string_view &amp;b, size_t digit, bool bigger, bool bothNegative, int steps=2):&#160;comparisonReport.cpp']]],
  ['reportcomparisonbypolarity_138',['reportComparisonByPolarity',['../comparisonReport_8cpp.html#a8bdddfcaa5a1d0339df5705ec6ff2aff',1,'reportComparisonByPolarity(const std::string_view &amp;a, const std::string_view &amp;b, const bool bigger, const int steps):&#160;comparisonReport.cpp'],['../comparisonReport_8hpp.html#a4d8e360e5845468ad9de413dea6b7a85',1,'reportComparisonByPolarity(const std::string_view &amp;a, const std::string_view &amp;b, bool greater, int steps=2):&#160;comparisonReport.cpp']]],
  ['reportdecimalconvert_139',['reportDecimalConvert',['../decimalConvertReport_8hpp.html#a38b218d682745f575e577962291c0834',1,'reportDecimalConvert(const std::string_view &amp;inputString, const std::string_view &amp;baseString, const std::string_view &amp;convertedString, const int steps=2):&#160;decimalConvertReport.cpp'],['../decimalConvertReport_8cpp.html#adef21e05b0bf387eebb5dbc7ec8fee61',1,'reportDecimalConvert(const std::string_view &amp;inputString, const std::string_view &amp;baseString, const std::string_view &amp;convertedString, const int steps):&#160;decimalConvertReport.cpp']]],
  ['reportdecimalconvertstep_140',['reportDecimalConvertStep',['../decimalConvertReport_8cpp.html#a7a30eeca49cdc355732971d0aad6d244',1,'reportDecimalConvertStep(const std::string_view &amp;baseString, const std::string_view &amp;digit, const size_t powerIndex, const std::string_view &amp;convertedDigit, const size_t maxWidth):&#160;decimalConvertReport.cpp'],['../decimalConvertReport_8hpp.html#a7a30eeca49cdc355732971d0aad6d244',1,'reportDecimalConvertStep(const std::string_view &amp;baseString, const std::string_view &amp;digit, const size_t powerIndex, const std::string_view &amp;convertedDigit, const size_t maxWidth):&#160;decimalConvertReport.cpp']]],
  ['reportdivision_141',['reportDivision',['../divisionReport_8cpp.html#a37e4e7cb6fe42ae3131cdc071b038687',1,'reportDivision(std::stringstream &amp;tempFormattedAns, const std::string_view &amp;temp, const std::string_view &amp;ans, const std::string_view &amp;divisor, const std::string_view &amp;_divisor, const std::string_view &amp;_number, const int steps, const int width, const bool resultIsNegative):&#160;divisionReport.cpp'],['../divisionReport_8hpp.html#a37e4e7cb6fe42ae3131cdc071b038687',1,'reportDivision(std::stringstream &amp;tempFormattedAns, const std::string_view &amp;temp, const std::string_view &amp;ans, const std::string_view &amp;divisor, const std::string_view &amp;_divisor, const std::string_view &amp;_number, const int steps, const int width, const bool resultIsNegative):&#160;divisionReport.cpp']]],
  ['reportdivisionstep_142',['reportDivisionStep',['../divisionReport_8cpp.html#aaebd1f284f6703b7629aa18d21f7ccf2',1,'reportDivisionStep(const std::string_view &amp;temp, const std::string_view &amp;quotient, const std::string_view &amp;divisor, size_t width, size_t index, const std::string_view lastRemainder):&#160;divisionReport.cpp'],['../divisionReport_8hpp.html#a3010ab5571a71e2c6493b47afc4eb9ed',1,'reportDivisionStep(const std::string_view &amp;temp, const std::string_view &amp;quotient, const std::string_view &amp;divisor, size_t width, size_t index, std::string_view lastRemainder):&#160;divisionReport.cpp']]],
  ['reportmultiply_143',['reportMultiply',['../multiplyReport_8cpp.html#a3e493cd7dde79f0eaa41c2eddd4cb895',1,'reportMultiply(const std::string &amp;a, const std::string &amp;b, const std::string &amp;aStr, const std::string &amp;bStr, const std::vector&lt; int &gt; &amp;finalProdDigits, const std::vector&lt; int &gt; &amp;finalProdCarries, const std::vector&lt; std::vector&lt; int &gt;&gt; &amp;prodDigitsOut, const std::vector&lt; std::vector&lt; int &gt;&gt; &amp;carries, bool resultIsNegative, const int steps):&#160;multiplyReport.cpp'],['../multiplyReport_8hpp.html#a153cbc1a7e7f58c5d837365339966f11',1,'reportMultiply(const std::string &amp;a, const std::string &amp;b, const std::string &amp;aStr, const std::string &amp;bStr, const std::vector&lt; int &gt; &amp;finalProdDigits, const std::vector&lt; int &gt; &amp;finalProdCarries, const std::vector&lt; std::vector&lt; int &gt;&gt; &amp;prodDigitsOut, const std::vector&lt; std::vector&lt; int &gt;&gt; &amp;carries, bool resultIsNegative=false, int steps=2):&#160;multiplyReport.cpp']]],
  ['reportpower_144',['reportPower',['../powerReport_8cpp.html#afff5f8aa771cf432836ef03f6f442dae',1,'reportPower(const std::string_view _number, const std::string_view &amp;raiseTo, const bool negative, const int steps):&#160;powerReport.cpp'],['../powerReport_8hpp.html#a3983fa7e3f0ac4977f27439fb574b389',1,'reportPower(std::string_view _number, const std::string_view &amp;raiseTo, bool negative, int steps):&#160;powerReport.cpp']]],
  ['reportsubtract_145',['reportSubtract',['../subtractReport_8cpp.html#ad21f3d209885b1c419ff73800bb3b33b',1,'reportSubtract(const std::string &amp;aInteger, const std::string &amp;aDecimal, const std::string &amp;bInteger, const std::string &amp;bDecimal, const bool aIsDecimal, const bool bIsDecimal, const std::vector&lt; int &gt; &amp;_diffDigits, const std::vector&lt; int &gt; &amp;borrows, const int steps, bool resultIsNegative, const bool noMinus):&#160;subtractReport.cpp'],['../subtractReport_8hpp.html#a9bff6a6b185789209249282856b766c2',1,'reportSubtract(const std::string &amp;aInteger, const std::string &amp;aDecimal, const std::string &amp;bInteger, const std::string &amp;bDecimal, bool aIsDecimal, bool bIsDecimal, const std::vector&lt; int &gt; &amp;_diffDigits, const std::vector&lt; int &gt; &amp;borrows, int steps, bool resultIsNegative, bool noMinus=false):&#160;subtractReport.cpp']]],
  ['reset_146',['reset',['../colors_8hpp.html#a4661597771a019efa3f0f92cfb0c6e02',1,'reset(std::ostream &amp;stream):&#160;colors.cpp'],['../colors_8cpp.html#a4661597771a019efa3f0f92cfb0c6e02',1,'reset(std::ostream &amp;stream):&#160;colors.cpp']]],
  ['reverse_147',['reverse',['../namespaceformats.html#a296119cbd1b0c858739af6b363fb262a',1,'formats']]],
  ['rgb_5fbg_148',['RGB_BG',['../colors_8hpp.html#a2ed9cd37a5983107984f2af583c469d8',1,'colors.hpp']]],
  ['rgb_5ftext_149',['RGB_TEXT',['../colors_8hpp.html#a1c92c41f9a358554c589c5877d61bf20',1,'colors.hpp']]],
  ['rreplace_150',['rReplace',['../util_8hpp.html#aad0ced1dffb5cde8bcff9ad90823da9a',1,'util.hpp']]]
];
