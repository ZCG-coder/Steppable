---
# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms
on:
    push:
        branches: ["develop"]
        paths:
            - "**.cpp"
            - "**.hpp"
            - "**.py"
            - "**.yml"
jobs:
    build:
        runs-on: ${{ matrix.os }}
        strategy:
            # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
            fail-fast: true
            # Set up a matrix to run the following 3 configurations:
            # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
            # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
            # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
            #
            # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
            matrix:
                os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, windows-11-arm, macos-13, macos-14, macos-15]
                build_type: [Debug, Release]
                c_compiler: [clang, cl]
                python_version: ['3.11', '3.12', '3.13']
                include:
                    - os: windows-latest
                      c_compiler: cl
                      cpp_compiler: cl
                      cmake_extra_options: ''
                    - os: windows-11-arm
                      c_compiler: cl
                      cpp_compiler: cl
                      cmake_extra_options: ''
                    - os: ubuntu-latest
                      c_compiler: clang
                      cpp_compiler: clang++
                      cmake_extra_options: '-GNinja'
                    - os: ubuntu-24.04-arm
                      c_compiler: clang
                      cpp_compiler: clang++
                      cmake_extra_options: ''
                    - os: macos-13
                      c_compiler: clang
                      cpp_compiler: clang++
                      cmake_extra_options: '-GNinja'
                    - os: macos-14
                      c_compiler: clang
                      cpp_compiler: clang++
                      cmake_extra_options: '-GNinja'
                    - os: macos-15
                      c_compiler: clang
                      cpp_compiler: clang++
                      cmake_extra_options: '-GNinja'
                exclude:
                    - os: windows-latest
                      c_compiler: clang
                    - os: windows-11-arm
                      c_compiler: clang
                    - os: ubuntu-latest
                      c_compiler: cl
                    - os: ubuntu-24.04-arm
                      c_compiler: cl
                    - os: macos-13
                      c_compiler: cl
                    - os: macos-14
                      c_compiler: cl
                    - os: macos-15
                      c_compiler: cl
        steps:
            - uses: actions/checkout@v4

            - name: Set reusable strings
              # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
              id: strings
              shell: bash
              run: |
                echo "build-output-dir=${{ github.workspace }}/cmake-build" >> "$GITHUB_OUTPUT"
                echo "py-build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
                echo "CMAKE_C_COMPILER=${{ matrix.c_compiler }}" >> "$GITHUB_ENV"
                echo "CMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}" >> "$GITHUB_ENV"
                echo "CMAKE_OPTIONS=${{ matrix.cmake_extra_options }}" >> "$GITHUB_ENV"

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                cache: 'pip'
                python-version: ${{ matrix.python_version }}

            - name: Install Linux dependencies
              run: |
                sudo apt-get update
                sudo apt-get install -y build-essential git make \
                pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
                libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \
                libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev \
                libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
                libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev \
                libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev
              if: contains(matrix.os, 'ubuntu')

            - name: Install dependencies
              run: pip install .
              shell: bash

            - name: Python Build
              run: python setup.py build
              shell: bash

            - name: Upload Build Artifact (Python)
              uses: actions/upload-artifact@v4.3.1
              with:
                # Artifact name
                name: steppable-${{ matrix.os }}-cp${{ matrix.python_version }}-${{ matrix.build_type }}
                # A file, directory or wildcard pattern that describes what to upload
                path: ${{ steps.strings.outputs.py-build-output-dir }}
