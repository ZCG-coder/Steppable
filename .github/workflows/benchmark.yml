---
# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Benchmark on multiple platforms
on:
    push:
        branches: ["develop"]

    pull_request:
        branches: ["main"]
jobs:
    graph:
        runs-on: ${{ matrix.os }}
        strategy:
            # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
            fail-fast: false
            # Set up a matrix to run the following 3 configurations:
            # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
            # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
            # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
            #
            # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
            matrix:
                os: [ubuntu-latest, macos-14]
                build_type: [Release]
                c_compiler: [clang]
                include:
                    - os: ubuntu-latest
                      c_compiler: clang
                      cpp_compiler: clang++
                      cmake_extra_options: '-GNinja'
                    - os: macos-14
                      c_compiler: clang
                      cpp_compiler: clang++
                      cmake_extra_options: '-GNinja'

        steps:
            - uses: actions/checkout@v4

            - name: Set reusable strings
              # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
              id: strings
              shell: bash
              run: |
                echo "build-output-dir=${{ github.workspace }}/cmake-build" >> "$GITHUB_OUTPUT"
                echo "py-build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
                echo "CMAKE_C_COMPILER=${{ matrix.c_compiler }}" >> "$GITHUB_ENV"
                echo "CMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}" >> "$GITHUB_ENV"
                echo "CMAKE_OPTIONS=${{ matrix.cmake_extra_options }}" >> "$GITHUB_ENV"

            - name: Set up Homebrew
              id: set-up-homebrew
              uses: Homebrew/actions/setup-homebrew@master

            - name: Install LLVM
              run: |
                brew install llvm ninja
                echo "PATH=$(brew --prefix llvm)/bin:$PATH" >> "$GITHUB_ENV"

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                cache: 'pip'
                python-version: '3.12'

            - name: Install dependencies
              run: pip install .
              shell: bash

            - name: Configure CMake
              # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
              # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
              run: cmake -B "${{github.workspace}}/build" -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DPYTHON_INCLUDE_DIR=$(python -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") -DPYTHON_LIBRARY=$(python -c "import distutils.sysconfig as sysconfig; print(sysconfig.get_config_var('LIBDIR'))") -DPYTHON_EXECUTABLE:FILEPATH=`which python` -DSTP_BUILD_COMPONENT_EXECUTABLE=True
              shell: bash

            - name: CMake Build
              # Build CMake in a 'build' subdirectory.
              run: cmake --build "${{github.workspace}}/build"
              shell: bash

            - name: Benchmark
              run: python tools/benchmark.py -g
              shell: bash

            - name: Upload Graphs
              uses: actions/upload-artifact@v4.3.1
              with:
                # Artifact name
                name: Benchmark ${{ matrix.os }}
                # A file, directory or wildcard pattern that describes what to upload
                path: ${{ github.workspace }}/tools/figures
