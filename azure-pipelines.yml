trigger:
  branches:
    include:
      - main

jobs:
  - job: BuildJobLinux
    displayName: 'Build C++ Project (Linux)'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - checkout: self

      - task: CMake@1
        displayName: 'Configure CMake (Linux)'
        inputs:
          cmakeArgs: '-B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc-13 -D CMAKE_CXX_COMPILER=g++-13'
          workingDirectory: '$(Build.SourcesDirectory)'

      - task: CMake@1
        displayName: 'Build C++ Project (Linux)'
        inputs:
          cmakeArgs: '--build .'
          workingDirectory: '$(Build.SourcesDirectory)/build'
          
      - task: CmdLine@2
        inputs:
          script: 'ctest --output-junit out-linux.xml'
          workingDirectory: '$(Build.SourcesDirectory)/build/tests'
          failOnStderr: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '*.xml'
          searchFolder: '$(Build.SourcesDirectory)/build/tests'
          mergeTestResults: true
          failTaskOnFailedTests: true
          failTaskOnMissingResultsFile: true
          testRunTitle: 'Test on Linux'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.SourcesDirectory)/build'
          artifact: 'Build-Linux'
          publishLocation: 'pipeline'

  - job: BuildJobWindows
    displayName: 'Build C++ Project (Windows)'
    pool:
      vmImage: 'windows-latest'
    steps:
      - checkout: self

      - task: CMake@1
        displayName: 'Configure CMake (Windows)'
        inputs:
          cmakeArgs: '-B build -DCMAKE_BUILD_TYPE=Release --config Release'
          workingDirectory: '$(Build.SourcesDirectory)'

      - task: CMake@1
        displayName: 'Build C++ Project (Windows)'
        inputs:
          cmakeArgs: '--build .'
          workingDirectory: '$(Build.SourcesDirectory)/build'

      - task: CmdLine@2
        inputs:
          script: 'ctest --output-junit out-windows.xml'
          workingDirectory: '$(Build.SourcesDirectory)/build/tests'
          failOnStderr: true

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '*.xml'
          searchFolder: '$(Build.SourcesDirectory)/build/tests'
          mergeTestResults: true
          failTaskOnFailedTests: true
          failTaskOnMissingResultsFile: true
          testRunTitle: 'Test on Windows'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.SourcesDirectory)/build'
          artifact: 'Build-Windows'
          publishLocation: 'pipeline'
